!function(){$(function(){$(".tabs").each(function(){new t({obj:$(this),showType:2,activeIndex:function(t){console.log(t)}})})});var t=function(t){var n=this,e=t.obj,i=t.showType,s=t.activeIndex,o=$(window),a=e.find("dt"),c=e.find("dd"),d=!0,h=function(){1==i?e.addClass("tabs_animated1"):2==i&&e.addClass("tabs_animated2")},v=function(){a.on({click:function(){o.width()<992?C($(this)):(l($(this)),m($(this)))}}),o.on({load:function(){o.width()>=992?(r(),u(),d=!1):d=!0},resize:function(){o.width()>=992?(r(),u(),d=!1):(b(),d=!0)}})},f=function(){e[0].obj=n,v(),h()},r=function(){c.css({top:a.eq(-1).position().top+a.eq(-1).innerHeight()})},l=function(t){var n=t,e=n.next(),i=e.find(".tabs__content");n.hasClass("active")||(a.removeClass("active"),c.height(0),n.addClass("active"),e.innerHeight(i.innerHeight())),s(n.index()/2)},u=function(){d&&(a.eq(0).addClass("active"),m(a.eq(0)))},m=function(t){var n=t.next();e.css({"min-height":n.find(".tabs__content").height()+n.position().top})},C=function(t){var n=t,e=n.next(),i=e.find(".tabs__content");n.hasClass("active")?(n.removeClass("active"),e.removeAttr("style")):(a.removeClass("active"),c.removeAttr("style"),n.addClass("active"),e.height(i.innerHeight()))},b=function(){e.removeAttr("style"),a.removeClass("active"),c.removeAttr("style")};f()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
